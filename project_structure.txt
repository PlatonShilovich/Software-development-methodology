- software-development-methodology
	- .eslintrc.yml:
		parser: "@typescript-eslint/parser"
		parserOptions:
		  ecmaVersion: 2020
		  sourceType: module
		  project: ./tsconfig.json # Для правил TypeScript
		extends:
		  - standard-with-typescript # Базовые правила для TypeScript
		  - prettier # Интеграция с Prettier
		plugins:
		  - "@typescript-eslint" # Поддержка TypeScript
		ignorePatterns:
		  - node_modules # Игнорируем node_modules
		  - dist # Игнорируем скомпилированные файлы
		  - "*.config.js" # Игнорируем конфигурационные файлы
		rules:
		  no-console: warn # Разрешить console.log для CLI
		  import/extensions: off # Разрешить импорт без расширений
		  # Настройки порядка импорта
		  "import/order":
		    - error
		    - groups:
		        - ["builtin", "external"] # Базовые и внешние модули
		        - "internal" # Внутренние модули
		        - ["sibling", "parent"] # Импорты из соседних и родительских файлов
		        - "index" # Импорт из index файлов
		      alphabetize:
		        order: "asc" # Сортировать по алфавиту
		        caseInsensitive: true # Игнорировать регистр
		  # Обеспечение единообразных типов
		  "@typescript-eslint/consistent-type-definitions":
		    - error
		    - "type"
		  # Отключение избыточно строгих правил для CLI
		  "@typescript-eslint/strict-boolean-expressions": off
		  "@typescript-eslint/prefer-nullish-coalescing": off
		  "@typescript-eslint/explicit-function-return-type": off
		  "@typescript-eslint/restrict-template-expressions": off
		  "@typescript-eslint/triple-slash-reference": off
		  "@typescript-eslint/ban-types": off
		  "@typescript-eslint/consistent-type-assertions": off
		  # Обязательные фигурные скобки
		  curly:
		    - error
		    - all
		  # Запрет неровных пробелов
		  no-irregular-whitespace:
		    - error
		    - skipTemplates: true
		      skipStrings: true

	- .git
		- hooks
		- info
		- logs
			- refs
				- heads
				- remotes
					- origin
		- objects
			- 02
			- 08
			- 1b
			- 23
			- 34
			- 38
			- 3c
			- 3d
			- 3f
			- 47
			- 49
			- 4b
			- 4c
			- 4f
			- 5a
			- 66
			- 6c
			- 71
			- 76
			- 81
			- 84
			- 8b
			- 8c
			- 90
			- 96
			- a4
			- a5
			- af
			- b0
			- b2
			- b9
			- c2
			- cd
			- d4
			- db
			- f6
			- info
			- pack
		- refs
			- heads
			- remotes
				- origin
			- tags
	- package.json:
		{
		  "name": "software-development-methodology",
		  "version": "1.0.0",
		  "main": "index.js",
		  "scripts": {
		    "lint": "eslint . --ext .ts",
		    "test": "echo \"Error: no test specified\" && exit 1",
		    "build": "tsc",
		    "start": "node dist/src/index.js",
		    "start:ts": "ts-node src/index.ts"
		  },
		  "keywords": [],
		  "author": "",
		  "license": "ISC",
		  "description": "",
		  "devDependencies": {
		    "@typescript-eslint/eslint-plugin": "^6.21.0",
		    "@typescript-eslint/parser": "^6.21.0",
		    "eslint": "^8.57.1",
		    "eslint-config-prettier": "^10.1.1",
		    "eslint-config-standard-with-typescript": "^43.0.1",
		    "eslint-plugin-import": "^2.31.0",
		    "prettier": "^3.5.3",
		    "ts-node": "^10.9.2",
		    "typescript": "^5.8.2"
		  }
		}
		

	- script.ts:
		import * as fs from 'fs';
		import * as path from 'path';
		
		const projectPath = path.resolve('/Users/platon/software-development-methodology'); // Путь к проекту
		const outputFilePath = path.join('/Users/platon/software-development-methodology', 'project_structure.txt'); // Выходной файл
		const includeExtensions = ['.ts', '.js', '.md', '.tsx', '.prisma', 'scss', 'json', 'yml']; // Фильтр по расширениям
		const ignoreFolders = ['node_modules']; // Игнорируемые папки
		const ignoreFiles = ['README.md', 'exportProject.ts', 'package-lock.json']; // Файлы, которые НЕ должны записываться
		
		// Функция для рекурсивного обхода файлов
		function readFilesRecursively(dir: string, prefix: string = '-'): string {
		  let output = `${prefix} ${path.basename(dir)}\n`;
		
		  const files = fs.readdirSync(dir);
		
		  for (const file of files) {
		    const filePath = path.join(dir, file);
		    const stat = fs.statSync(filePath);
		
		    if (stat.isDirectory()) {
		      if (!ignoreFolders.includes(file)) {
		        output += readFilesRecursively(filePath, `\t${prefix}`);
		      }
		    } else if (
		      includeExtensions.some((ext) => file.endsWith(ext))
		      && !ignoreFiles.includes(file) // Проверка, чтобы файл не был в списке игнорируемых
		    ) {
		      const content = fs.readFileSync(filePath, 'utf8');
		      output += `\t${prefix} ${file}:\n`;
		      output
		        += `${content
		          .split('\n')
		          .map((line) => `\t\t${line}`)
		          .join('\n')}\n\n`;
		    }
		  }
		
		  return output;
		}
		
		// Читаем структуру проекта и записываем в файл
		const projectStructure = readFilesRecursively(projectPath);
		fs.writeFileSync(outputFilePath, projectStructure, 'utf8');
		
		console.log(`Файл с содержимым проекта сохранен: ${outputFilePath}`);
		

	- src
		- engine.ts:
		import type * as readline from 'readline';
		
		export async function runGame(
		  rl: readline.Interface, // Принимаем интерфейс как параметр
		  gameDescription: string,
		  generateQuestionAndAnswer: () => { question: string; answer: string },
		) {
		  console.log('Welcome to the Brain Games!');
		  const name = await askQuestion(rl, 'May I have your name? ');
		  console.log(`Hello, ${name}!`);
		  console.log(gameDescription);
		
		  let correctAnswers = 0;
		  while (correctAnswers < 3) {
		    const { question, answer } = generateQuestionAndAnswer();
		    console.log(`Question: ${question}`);
		    const userAnswer = await askQuestion(rl, 'Your answer: ');
		
		    if (userAnswer.trim() === answer) {
		      console.log('Correct!');
		      correctAnswers += 1;
		    } else {
		      console.log(
		        `'${userAnswer}' is wrong answer ;(. Correct answer was '${answer}'.`,
		      );
		      console.log(`Let's try again, ${name}!`);
		      break;
		    }
		  }
		
		  if (correctAnswers === 3) {
		    console.log(`Congratulations, ${name}!`);
		  }
		}
		
		async function askQuestion(rl: readline.Interface, query: string): Promise<string> {
		  return await new Promise((resolve) => {
		    rl.question(query, (answer) => {
		      resolve(answer);
		    });
		  });
		}

		- games
			- game1.ts:
		function gcd(a: number, b: number): number {
		  let x = a;
		  let y = b;
		  while (y !== 0) {
		    const temp = y;
		    y = x % y;
		    x = temp;
		  }
		  return x;
		}
		
		function lcm(a: number, b: number): number {
		  return (a * b) / gcd(a, b);
		}
		
		function calculateLCM(a: number, b: number, c: number): number {
		  return lcm(lcm(a, b), c);
		}
		
		export const gameDescription = 'Find the smallest common multiple of given numbers.';
		
		export function generateQuestionAndAnswer(): { question: string; answer: string } {
		  const num1 = Math.floor(Math.random() * 100) + 1;
		  const num2 = Math.floor(Math.random() * 100) + 1;
		  const num3 = Math.floor(Math.random() * 100) + 1;
		  const question = `${num1} ${num2} ${num3}`;
		  const answer = calculateLCM(num1, num2, num3).toString();
		  return { question, answer };
		}
		

			- game2.ts:
		function generateProgression(
		  start: number,
		  ratio: number,
		  length: number
		): number[] {
		  const progression: number[] = [];
		  let current = start;
		  for (let i = 0; i < length; i += 1) {
		    progression.push(current);
		    current *= ratio;
		  }
		  return progression;
		}
		
		export const gameDescription = "What number is missing in the progression?";
		
		export function generateQuestionAndAnswer(): {
		  question: string;
		  answer: string;
		} {
		  const length = Math.floor(Math.random() * 6) + 5; // От 5 до 10 чисел
		  const start = Math.floor(Math.random() * 10) + 1; // Начало от 1 до 10
		  const ratio = Math.floor(Math.random() * 4) + 2; // Коэффициент от 2 до 5
		  const progression = generateProgression(start, ratio, length);
		  const hiddenIndex = Math.floor(Math.random() * length);
		  const question = progression
		    .map((num, index) => (index === hiddenIndex ? ".." : num.toString()))
		    .join(" ");
		  const answer = progression[hiddenIndex].toString();
		  return { question, answer };
		}
		

		- index.ts:
		import * as readline from 'readline';
		import { runGame } from './engine';
		import { gameDescription as game1Description, generateQuestionAndAnswer as generateGame1 } from './games/game1';
		import { gameDescription as game2Description, generateQuestionAndAnswer as generateGame2 } from './games/game2';
		
		const rl = readline.createInterface({
		  input: process.stdin,
		  output: process.stdout,
		});
		
		async function askQuestion(query: string): Promise<string> {
		  return await new Promise((resolve) => {
		    rl.question(query, (answer) => {
		      resolve(answer);
		    });
		  });
		}
		
		async function selectGame() {
		  console.log('Welcome to the Brain Games!');
		  console.log('Please select a game:');
		  console.log('1. Find the smallest common multiple of given numbers. (НОК)');
		  console.log('2. What number is missing in the progression?');
		
		  const choice = await askQuestion('Enter 1 or 2: ');
		
		  if (choice === '1') {
		    await runGame(rl, game1Description, generateGame1);
		  } else if (choice === '2') {
		    await runGame(rl, game2Description, generateGame2);
		  } else {
		    console.log('Invalid choice. Please enter 1 or 2.');
		  }
		
		  rl.close(); // Закрываем интерфейс только после завершения игры
		}
		
		selectGame().catch((err) => {
		  console.error(err);
		  rl.close();
		});

	- tsconfig.json:
		{
		  "compilerOptions": {
		    "target": "ES6",
		    "module": "commonjs",
		    "outDir": "./dist",
		    "rootDir": "./",
		    "strict": true,
		    "esModuleInterop": true
		  }
		}
		

